{"version":3,"sources":["logo.svg","Constants/actions.js","Reducers/index.js","configureStore.js","Actions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","START_APP","initialState","onStart","Date","onUpdate","rootReducer","combineReducers","startApp","state","arguments","length","undefined","action","type","Object","assign","loggerMiddleware","createLogger","initApp","currentState","objectSpread","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","actions","getTime","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","defaultProps","PropTypes","object","connect","dispatch","bindActionCreators","Boolean","window","location","hostname","match","preloadedState","rootElement","document","getElementById","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iOCA3BC,EAAY,mBCInBC,EAAe,CACjBC,QAAS,IAAIC,KACbC,SAAU,IAAID,MAclB,IAIeE,EAJKC,YAAgB,CAChCC,SAZJ,WAAgD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBR,EAAcW,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACX,KAAKb,EACD,OAAOc,OAAOC,OAAO,GAAId,EAAc,CACnCG,SAAUQ,EAAOR,WAEzB,QACI,OAAOI,MCXbQ,EAAmBC,6FCHlB,SAASC,EAAQC,GACpB,OAAOL,OAAAM,EAAA,EAAAN,CAAA,GACAK,EADP,CAEIN,KAAMb,EACNI,SAAU,IAAID,4BCIhBkB,qBACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAT,OAAAU,EAAA,EAAAV,CAAAW,KAAAJ,GAChBE,EAAAT,OAAAY,EAAA,EAAAZ,CAAAW,KAAAX,OAAAa,EAAA,EAAAb,CAAAO,GAAAO,KAAAH,KAAMH,IACNO,QAAQC,IAAI,YAAaP,EAAKD,OAFdC,mFAWhBE,KAAKH,MAAMS,QAAQb,2CAKnB,OADAW,QAAQC,IAAIL,KAAKH,MAAMf,SAASH,SAAS4B,UAAUP,KAAKH,MAAMf,SAASL,QAAQ8B,WAE7EC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAxBQC,cAAZtB,EAMGuB,aAAe,CACpBrC,SAAUsC,IAAUC,OACpBf,QAASc,IAAUC,QA8BvB,IAIeC,cAJS,SAAAvC,GAAK,MAAK,CAC9BD,SAAUC,EAAMD,WAGoB,SAACyC,GACvC,MAAO,CAACjB,QAASkB,YAAmB,CAClC/B,WACC8B,KAHUD,CAIZ1B,GC5CiB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IJHuCC,EIGjCC,EAAcC,SAASC,eAAe,QAEtCC,EJJKC,YACHvD,EACAkD,EACAM,YAAgBC,IAAiB9C,IIGzC+C,IAASC,OACL/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAUN,MAAOA,GACb1B,EAAAC,EAAAC,cAAC+B,EAAD,OAEJV,GD+GE,kBAAmBW,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96d16d3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const START_APP = 'INITIALIZING_APP';","import { combineReducers } from 'redux';\n\nimport { START_APP } from \"../Constants/actions\";\n\nconst initialState = {\n    onStart: new Date(),\n    onUpdate: new Date()\n};\n\nfunction startApp(state = initialState, action) {\n    switch (action.type) {\n        case START_APP:\n            return Object.assign({}, initialState, {\n                onUpdate: action.onUpdate\n            });\n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    startApp\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './Reducers'\n\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n    return createStore(\n        rootReducer,\n        preloadedState,\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\n    )\n}","import { START_APP } from '../Constants/actions';\n\nexport function initApp(currentState){\n    return {\n        ...currentState,\n        type: START_APP,\n        onUpdate: new Date()\n    };\n}\n\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { initApp } from \"./Actions\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    console.log('start App', this.props);\n  }\n\n  static defaultProps = {\n    startApp: PropTypes.object,\n    actions: PropTypes.object\n  };\n\n  componentDidMount() {\n    this.props.actions.initApp();\n  }\n\n  render() {\n    console.log(this.props.startApp.onUpdate.getTime(),this.props.startApp.onStart.getTime());\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n    startApp: state.startApp\n});\n\nexport default connect(mapStateToProps, (dispatch) => {\n  return {actions: bindActionCreators({\n    initApp\n  }, dispatch)}\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}